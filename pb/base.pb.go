// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: base.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Content Address KEy - current implementation is SHA256 and `digest` length is
// 32 bytes.
type Cake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Cake) Reset() {
	*x = Cake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cake) ProtoMessage() {}

func (x *Cake) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cake.ProtoReflect.Descriptor instead.
func (*Cake) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

func (x *Cake) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

// RAndom KEy (16 bytes sourced from urandom) - long enough to be considered
// unique within specific domain. Key space is 4 bits bigger that UUID4.
type Rake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Rake) Reset() {
	*x = Rake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rake) ProtoMessage() {}

func (x *Rake) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rake.ProtoReflect.Descriptor instead.
func (*Rake) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

func (x *Rake) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// One of either Cake or Ake
type Ake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to COrR:
	//	*Ake_Cake
	//	*Ake_Rake
	COrR isAke_COrR `protobuf_oneof:"c_or_r"`
}

func (x *Ake) Reset() {
	*x = Ake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ake) ProtoMessage() {}

func (x *Ake) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ake.ProtoReflect.Descriptor instead.
func (*Ake) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

func (m *Ake) GetCOrR() isAke_COrR {
	if m != nil {
		return m.COrR
	}
	return nil
}

func (x *Ake) GetCake() *Cake {
	if x, ok := x.GetCOrR().(*Ake_Cake); ok {
		return x.Cake
	}
	return nil
}

func (x *Ake) GetRake() *Rake {
	if x, ok := x.GetCOrR().(*Ake_Rake); ok {
		return x.Rake
	}
	return nil
}

type isAke_COrR interface {
	isAke_COrR()
}

type Ake_Cake struct {
	Cake *Cake `protobuf:"bytes,1,opt,name=cake,proto3,oneof"`
}

type Ake_Rake struct {
	Rake *Rake `protobuf:"bytes,2,opt,name=rake,proto3,oneof"`
}

func (*Ake_Cake) isAke_COrR() {}

func (*Ake_Rake) isAke_COrR() {}

type TagMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         string      `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Matches     []*TagMatch `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
	CombineAsOr bool        `protobuf:"varint,3,opt,name=combine_as_or,json=combineAsOr,proto3" json:"combine_as_or,omitempty"` // `and` behavior is default, `or` if `true`
	Negate      bool        `protobuf:"varint,4,opt,name=negate,proto3" json:"negate,omitempty"`                                // negate combined match
}

func (x *TagMatch) Reset() {
	*x = TagMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMatch) ProtoMessage() {}

func (x *TagMatch) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMatch.ProtoReflect.Descriptor instead.
func (*TagMatch) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

func (x *TagMatch) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TagMatch) GetMatches() []*TagMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *TagMatch) GetCombineAsOr() bool {
	if x != nil {
		return x.CombineAsOr
	}
	return false
}

func (x *TagMatch) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

// see https://github.com/jbenet/nanotime
type Nanotime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nanos uint64 `protobuf:"fixed64,1,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Nanotime) Reset() {
	*x = Nanotime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nanotime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nanotime) ProtoMessage() {}

func (x *Nanotime) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nanotime.ProtoReflect.Descriptor instead.
func (*Nanotime) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

func (x *Nanotime) GetNanos() uint64 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

var File_base_proto protoreflect.FileDescriptor

var file_base_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x61,
	0x67, 0x2e, 0x70, 0x62, 0x22, 0x1e, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x52, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x57, 0x0a, 0x03, 0x41, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x61, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x72,
	0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x61, 0x67, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x6b, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x54, 0x61,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x67, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x73, 0x5f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x4f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x22, 0x20, 0x0a, 0x08, 0x4e, 0x61, 0x6e, 0x6f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_base_proto_rawDescOnce sync.Once
	file_base_proto_rawDescData = file_base_proto_rawDesc
)

func file_base_proto_rawDescGZIP() []byte {
	file_base_proto_rawDescOnce.Do(func() {
		file_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_proto_rawDescData)
	})
	return file_base_proto_rawDescData
}

var file_base_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_base_proto_goTypes = []interface{}{
	(*Cake)(nil),     // 0: gag.pb.Cake
	(*Rake)(nil),     // 1: gag.pb.Rake
	(*Ake)(nil),      // 2: gag.pb.Ake
	(*TagMatch)(nil), // 3: gag.pb.TagMatch
	(*Nanotime)(nil), // 4: gag.pb.Nanotime
}
var file_base_proto_depIdxs = []int32{
	0, // 0: gag.pb.Ake.cake:type_name -> gag.pb.Cake
	1, // 1: gag.pb.Ake.rake:type_name -> gag.pb.Rake
	3, // 2: gag.pb.TagMatch.matches:type_name -> gag.pb.TagMatch
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_base_proto_init() }
func file_base_proto_init() {
	if File_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nanotime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_base_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Ake_Cake)(nil),
		(*Ake_Rake)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_proto_goTypes,
		DependencyIndexes: file_base_proto_depIdxs,
		MessageInfos:      file_base_proto_msgTypes,
	}.Build()
	File_base_proto = out.File
	file_base_proto_rawDesc = nil
	file_base_proto_goTypes = nil
	file_base_proto_depIdxs = nil
}
